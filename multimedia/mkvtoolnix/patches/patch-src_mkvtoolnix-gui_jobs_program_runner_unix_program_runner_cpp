Index: src/mkvtoolnix-gui/jobs/program_runner/unix_program_runner.cpp
--- src/mkvtoolnix-gui/jobs/program_runner/unix_program_runner.cpp.orig
+++ src/mkvtoolnix-gui/jobs/program_runner/unix_program_runner.cpp
@@ -15,20 +15,20 @@
 #include "common/list_utils.h"
 #include "common/path.h"
 #include "common/qt.h"
-#include "mkvtoolnix-gui/jobs/program_runner/linux_program_runner.h"
+#include "mkvtoolnix-gui/jobs/program_runner/unix_program_runner.h"
 
 namespace mtx::gui::Jobs {
 
-LinuxProgramRunner::LinuxProgramRunner()
+UnixProgramRunner::UnixProgramRunner()
   : ProgramRunner{}
 {
 }
 
-LinuxProgramRunner::~LinuxProgramRunner() {
+UnixProgramRunner::~UnixProgramRunner() {
 }
 
 bool
-LinuxProgramRunner::isRunProgramTypeSupported(Util::Settings::RunProgramType type) {
+UnixProgramRunner::isRunProgramTypeSupported(Util::Settings::RunProgramType type) {
   if (ProgramRunner::isRunProgramTypeSupported(type))
     return true;
 
@@ -47,8 +47,8 @@ LinuxProgramRunner::isRunProgramTypeSupported(Util::Se
 }
 
 void
-LinuxProgramRunner::systemctlAction(QString const &action) {
-  qDebug() << Q("LinuxProgramRunner::systemctlAction: about to execute 'systemctl %1'").arg(action);
+UnixProgramRunner::systemctlAction(QString const &action) {
+  qDebug() << Q("UnixProgramRunner::systemctlAction: about to execute 'systemctl %1'").arg(action);
 
   auto args   = QStringList{} << action;
   auto result = QProcess::execute(Q("systemctl"), args);
@@ -56,26 +56,26 @@ LinuxProgramRunner::systemctlAction(QString const &act
   if (result == 0)
     return;
 
-  qDebug() << Q("LinuxProgramRunner::systemctlAction: 'systemctl %1' failed: %2").arg(action).arg(result);
+  qDebug() << Q("UnixProgramRunner::systemctlAction: 'systemctl %1' failed: %2").arg(action).arg(result);
 }
 
 void
-LinuxProgramRunner::shutDownComputer(Util::Settings::RunProgramConfig &) {
+UnixProgramRunner::shutDownComputer(Util::Settings::RunProgramConfig &) {
   systemctlAction(Q("poweroff"));
 }
 
 void
-LinuxProgramRunner::hibernateComputer(Util::Settings::RunProgramConfig &) {
+UnixProgramRunner::hibernateComputer(Util::Settings::RunProgramConfig &) {
   systemctlAction(Q("hibernate"));
 }
 
 void
-LinuxProgramRunner::sleepComputer(Util::Settings::RunProgramConfig &) {
+UnixProgramRunner::sleepComputer(Util::Settings::RunProgramConfig &) {
   systemctlAction(Q("suspend"));
 }
 
 void
-LinuxProgramRunner::showDesktopNotification([[maybe_unused]] Util::Settings::RunProgramForEvent const forEvent,
+UnixProgramRunner::showDesktopNotification([[maybe_unused]] Util::Settings::RunProgramForEvent const forEvent,
                                             [[maybe_unused]] VariableMap const &variables) {
 #if defined(HAVE_QTDBUS)
   QString message;
@@ -102,12 +102,12 @@ LinuxProgramRunner::showDesktopNotification([[maybe_un
   hints[Q("desktop-entry")] = Q("org.bunkus.mkvtoolnix-gui");
   hints[Q("urgency")]       = 0u; // low
 
-  qDebug() << "LinuxProgramRunner::showDesktopNotification: about to notify; message & hints:" << message << hints;
+  qDebug() << "UnixProgramRunner::showDesktopNotification: about to notify; message & hints:" << message << hints;
 
   auto bus = QDBusConnection::sessionBus();
 
   if (!bus.isConnected()) {
-    qDebug() << "LinuxProgramRunner::showDesktopNotification: error: D-Bus session bus is not connected";
+    qDebug() << "UnixProgramRunner::showDesktopNotification: error: D-Bus session bus is not connected";
     return;
   }
 
@@ -125,7 +125,7 @@ LinuxProgramRunner::showDesktopNotification([[maybe_un
   };
 
   if (!reply.isValid())
-    qDebug() << "LinuxProgramRunner::showDesktopNotification: notification failed:" << reply.error();
+    qDebug() << "UnixProgramRunner::showDesktopNotification: notification failed:" << reply.error();
 #endif  // HAVE_QTDBUS
 }
 
