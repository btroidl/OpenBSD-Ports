Index: meson.build
--- meson.build.orig
+++ meson.build
@@ -276,8 +276,9 @@ cdata.set('HAVE_DBUS', dbus_dep.found())
 sdl_dep = dependency('sdl2', required : get_option('sdl2'))
 summary({'SDL2 (video examples)': sdl_dep.found()}, bool_yn: true, section: 'Misc dependencies')
 drm_dep = dependency('libdrm', required : false)
-readline_dep = dependency('readline', required : get_option('readline'))
 
+# readline can fail first then we can hard fail in the next step
+readline_dep = dependency('readline', required : false)
 if not readline_dep.found()
   readline_dep = cc.find_library('readline', required : get_option('readline'))
 endif
@@ -302,7 +303,11 @@ cdata.set('HAVE_OPUS', opus_dep.found())
 
 summary({'readline (for pw-cli)': readline_dep.found()}, bool_yn: true, section: 'Misc dependencies')
 cdata.set('HAVE_READLINE', readline_dep.found())
+if host_machine.system() == 'openbsd'
+ncurses_dep = cc.find_library('ncursesw', required : false)
+else
 ncurses_dep = dependency('ncursesw', required : false)
+endif
 sndfile_dep = dependency('sndfile', version : '>= 1.0.20', required : get_option('sndfile'))
 summary({'sndfile': sndfile_dep.found()}, bool_yn: true, section: 'pw-cat/pw-play/pw-dump/filter-chain')
 cdata.set('HAVE_SNDFILE', sndfile_dep.found())
@@ -383,10 +388,13 @@ cdata.set('HAVE_WEBRTC', webrtc_dep.found())
 
 # On FreeBSD and MidnightBSD, epoll-shim library is required for eventfd() and timerfd()
 epoll_shim_dep = (host_machine.system() == 'freebsd' or host_machine.system() == 'midnightbsd'
+    or host_machine.system() == 'openbsd'
     ? dependency('epoll-shim', required: true)
     : dependency('', required: false))
 
 libinotify_dep = (host_machine.system() == 'freebsd' or host_machine.system() == 'midnightbsd'
+# only needed if we enable alsa or v4l2
+#    or host_machine.system() == 'openbsd'
     ? dependency('libinotify', required: true)
     : dependency('', required: false))
 
