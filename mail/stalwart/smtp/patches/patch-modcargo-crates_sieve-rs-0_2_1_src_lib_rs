Index: modcargo-crates/sieve-rs-0.2.1/src/lib.rs
--- modcargo-crates/sieve-rs-0.2.1/src/lib.rs.orig
+++ modcargo-crates/sieve-rs-0.2.1/src/lib.rs
@@ -34,14 +34,14 @@
 //!
 //! ```rust
 //!     use sieve::{runtime::RuntimeError, Compiler, Event, Input, Runtime};
-//! 
+//!
 //!     let text_script = br#"
 //!     require ["fileinto", "body", "imap4flags"];
 //!     
 //!     if body :contains "tps" {
 //!         setflag "$tps_reports";
 //!     }
-//! 
+//!
 //!     if header :matches "List-ID" "*<*@*" {
 //!         fileinto "INBOX.lists.${2}"; stop;
 //!     }
@@ -50,23 +50,23 @@
 //! To: John Doe <jdoe@example.org>
 //! List-ID: <sales@example.org>
 //! Subject: TPS Reports
-//! 
+//!
 //! We're putting new coversheets on all the TPS reports before they go out now.
-//! So if you could go ahead and try to remember to do that from now on, that'd be great. All right! 
+//! So if you could go ahead and try to remember to do that from now on, that'd be great. All right!
 //! "#;
-//! 
+//!
 //!     // Compile
 //!     let compiler = Compiler::new();
 //!     let script = compiler.compile(text_script).unwrap();
-//! 
+//!
 //!     // Build runtime
 //!     let runtime = Runtime::new();
-//! 
+//!
 //!     // Create filter instance
 //!     let mut instance = runtime.filter(raw_message.as_bytes());
 //!     let mut input = Input::script("my-script", script);
 //!     let mut messages: Vec<String> = Vec::new();
-//! 
+//!
 //!     // Start event loop
 //!     while let Some(result) = instance.run(input) {
 //!         match result {
@@ -94,7 +94,7 @@
 //!                     // Set to true if the ID is duplicate
 //!                     input = false.into();
 //!                 }
-//!                 Event::Execute { command, arguments } => {
+//!                 Event::Execute { command, arguments, .. } => {
 //!                     println!(
 //!                         "Script executed command {:?} with parameters {:?}",
 //!                         command, arguments
@@ -102,7 +102,7 @@
 //!                     // Set to true if the script succeeded
 //!                     input = false.into();
 //!                 }
-//! 
+//!
 //!                 Event::Keep { flags, message_id } => {
 //!                     println!(
 //!                         "Keep message '{}' with flags {:?}.",
@@ -167,7 +167,7 @@
 //!                     messages.push(String::from_utf8(message).unwrap());
 //!                     input = true.into();
 //!                 }
-//! 
+//!
 //!                 #[cfg(test)]
 //!                 _ => unreachable!(),
 //!             },
@@ -419,6 +419,7 @@ pub enum Event {
         last: bool,
     },
     Execute {
+        command_type: CommandType,
         command: String,
         arguments: Vec<String>,
     },
@@ -528,6 +529,12 @@ pub enum VirusStatus {
     Virus,
 }
 
+#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
+pub enum CommandType {
+    Binary,
+    Query,
+}
+
 #[cfg(test)]
 mod tests {
     use std::{
@@ -664,7 +671,7 @@ mod tests {
                         } else {
                             "included-global"
                         });
-                        include_path.push(format!("{name}.sieve" ));
+                        include_path.push(format!("{name}.sieve"));
 
                         if let Ok(bytes) = fs::read(include_path.as_path()) {
                             let script = compiler.compile(&add_crlf(&bytes)).unwrap();
@@ -718,14 +725,16 @@ mod tests {
                     Event::DuplicateId { id, .. } => {
                         input = duplicated_ids.contains(&id).into();
                     }
-                    Event::Execute { command, arguments } => {
+                    Event::Execute {
+                        command, arguments, ..
+                    } => {
                         assert_eq!(arguments, ["param1", "param2"]);
                         input = (if command.eq_ignore_ascii_case("always_succeed") {
                             true
                         } else if command.eq_ignore_ascii_case("always_fail") {
                             false
                         } else {
-                            panic!("Unknown command {command}" );
+                            panic!("Unknown command {command}");
                         })
                         .into();
                     }
@@ -739,7 +748,7 @@ mod tests {
                         match command.as_str() {
                             "test" => {
                                 current_test = params.pop().unwrap();
-                                println!("Running test '{current_test}'..." );
+                                println!("Running test '{current_test}'...");
                             }
                             "test_set" => {
                                 let mut params = params.into_iter();
@@ -803,7 +812,7 @@ mod tests {
                                         panic!("Invalid currentdate");
                                     }
                                 } else {
-                                    panic!("test_set {target} not implemented." );
+                                    panic!("test_set {target} not implemented.");
                                 }
                             }
                             "test_message" => {
@@ -832,7 +841,7 @@ mod tests {
                                     print!("<[");
                                     print!("{}", String::from_utf8(built_message).unwrap());
                                     println!("]>");
-                                    panic!("Message built incorrectly at '{current_test}'" );
+                                    panic!("Message built incorrectly at '{current_test}'");
                                 }
                             }
                             "test_config_set" => {
@@ -927,19 +936,19 @@ mod tests {
                                             3
                                         });
                                     }
-                                    param => panic!("Invalid test_config_set param '{param}'" ),
+                                    param => panic!("Invalid test_config_set param '{param}'"),
                                 }
                             }
                             "test_result_execute" => {
-                                input = (matches!(&instance.final_event, Some(Event::Keep { .. })) || 
-                                    actions.iter().any(|a| {
-                                    matches!(
-                                        a,
-                                        Event::Keep { .. }
-                                            | Event::FileInto { .. }
-                                            | Event::SendMessage { .. }
-                                    )
-                                }))
+                                input = (matches!(&instance.final_event, Some(Event::Keep { .. }))
+                                    || actions.iter().any(|a| {
+                                        matches!(
+                                            a,
+                                            Event::Keep { .. }
+                                                | Event::FileInto { .. }
+                                                | Event::SendMessage { .. }
+                                        )
+                                    }))
                                 .into();
                             }
                             "test_result_action" => {
@@ -1026,7 +1035,7 @@ mod tests {
                             "test_fail" => {
                                 panic!("Test '{}' failed: {}", current_test, params.pop().unwrap());
                             }
-                            _ => panic!("Test command {command} not implemented." ),
+                            _ => panic!("Test command {command} not implemented."),
                         }
                     }
                     action => {
