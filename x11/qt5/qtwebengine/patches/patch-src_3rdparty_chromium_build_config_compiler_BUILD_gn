Index: src/3rdparty/chromium/build/config/compiler/BUILD.gn
--- src/3rdparty/chromium/build/config/compiler/BUILD.gn.orig
+++ src/3rdparty/chromium/build/config/compiler/BUILD.gn
@@ -64,7 +64,7 @@ declare_args() {
 
   # Enable fatal linker warnings. Building Chromium with certain versions
   # of binutils can cause linker warning.
-  fatal_linker_warnings = true
+  fatal_linker_warnings = false
 
   # Build with C++ RTTI enabled. Chromium builds without RTTI by default,
   # but some sanitizers are known to require it, like CFI diagnostics
@@ -148,7 +148,7 @@ declare_args() {
   # Token limits may not be accurate for build configs not covered by the CQ,
   # so only enable them by default for mainstream build configs.
   enable_wmax_tokens =
-      !is_official_build &&
+      !is_official_build && !is_openbsd &&
       ((is_mac && target_cpu == "x64" && !use_system_xcode &&
         mac_xcode_version == "default") ||
        (is_linux && !is_chromeos && target_cpu == "x64") ||
@@ -305,9 +305,18 @@ config("compiler") {
         !(is_mac && target_cpu == "arm64" && is_component_build)) {
       ldflags += [ "-Wl,-fatal_warnings" ]
     }
+
   } else {
   }
 
+  if (current_cpu == "x86" && is_openbsd) {
+    ldflags = [ "-Wl,-z,notext" ]
+  }
+
+  if (is_openbsd) {
+    ldflags += [ "-Wl,-z,wxneeded", "-Wl,-z,nobtcfi" ]
+  }
+
   if (use_qt && is_clang) {
     cflags += [
       "-Wno-unknown-attributes",
@@ -398,7 +407,7 @@ config("compiler") {
     }
 
     ldflags += [
-      "-Wl,-z,noexecstack",
+      "-Wl,-z,wxneeded",
       "-Wl,-z,relro",
     ]
 
@@ -406,13 +415,8 @@ config("compiler") {
       ldflags += [ "-Wl,-z,now" ]
     }
 
-    # Compiler instrumentation can introduce dependencies in DSOs to symbols in
-    # the executable they are loaded into, so they are unresolved at link-time.
-    if (!using_sanitizer) {
-      ldflags += [
-        "-Wl,-z,defs",
-        "-Wl,--as-needed",
-      ]
+    if (current_cpu == "x86" && is_openbsd) {
+        ldflags += [ "-Wl,-z,notext" ]
     }
   }
 
@@ -499,7 +503,7 @@ config("compiler") {
     ldflags += [ "-Wl,-z,keep-text-section-prefix" ]
   }
 
-  if (is_clang && !is_nacl && !use_xcode_clang && !use_qt) {
+  if (is_clang && !is_nacl && !use_xcode_clang && !is_openbsd && !use_qt) {
     cflags += [ "-fcrash-diagnostics-dir=" + clang_diagnostic_dir ]
 
     cflags += [
@@ -782,7 +786,7 @@ config("compiler_cpu_abi") {
         ]
       }
     } else if (current_cpu == "arm") {
-      if (is_clang && !is_android && !is_nacl) {
+      if (is_clang && !is_android && !is_nacl && !is_openbsd) {
         cflags += [ "--target=arm-linux-gnueabihf" ]
         ldflags += [ "--target=arm-linux-gnueabihf" ]
       }
@@ -796,7 +800,7 @@ config("compiler_cpu_abi") {
         cflags += [ "-mtune=$arm_tune" ]
       }
     } else if (current_cpu == "arm64") {
-      if (is_clang && !is_android && !is_nacl && !is_fuchsia) {
+      if (is_clang && !is_android && !is_nacl && !is_fuchsia && !is_openbsd) {
         cflags += [ "--target=aarch64-linux-gnu" ]
         ldflags += [ "--target=aarch64-linux-gnu" ]
       }
@@ -1454,11 +1458,6 @@ config("default_warnings") {
       cflags += [ "-Wundeclared-selector" ]
     }
 
-    # Suppress warnings about ABI changes on ARM (Clang doesn't give this
-    # warning).
-    if (current_cpu == "arm" && !is_clang) {
-      cflags += [ "-Wno-psabi" ]
-    }
 
     if (!is_clang) {
       cflags_cc += [
@@ -1575,9 +1574,6 @@ config("default_warnings") {
 
           # TODO(https://crbug.com/1028110): Evaluate and possible enable.
           "-Wno-deprecated-copy",
-
-          # TODO(https://crbug.com/1050281): Clean up, enable.
-          "-Wno-non-c-typedef-for-linkage",
         ]
 
         cflags_c += [
@@ -1589,7 +1585,7 @@ config("default_warnings") {
           cflags += [ "-Wmax-tokens" ]
         } else {
           # TODO(https://crbug.com/1049569): Remove after Clang 87b235db.
-          cflags += [ "-Wno-max-tokens" ]
+          #cflags += [ "-Wno-max-tokens" ]
         }
       }
     }
@@ -1725,7 +1721,7 @@ config("no_chromium_code") {
       # suppressing them individually, we just blanket suppress them here.
       "-Wno-unused-variable",
     ]
-    if (!is_nacl && (current_toolchain == host_toolchain || !use_xcode_clang)) {
+    if (!is_nacl && (current_toolchain == host_toolchain || !use_xcode_clang) && !is_openbsd) {
       cflags += [
         # TODO(https://crbug.com/1031169): Clean up and enable.
         "-Wno-misleading-indentation",
@@ -1803,7 +1799,7 @@ config("thin_archive") {
   # Mac and iOS use the mac-specific "libtool" command, not ar, which doesn't
   # have a "thin archive" mode (it does accept -T, but it means truncating
   # archive names to 16 characters, which is not what we want).
-  if ((is_posix && !is_nacl && !is_apple) || is_fuchsia) {
+  if ((is_posix && !is_nacl && !is_apple && !is_openbsd) || is_fuchsia) {
     arflags = [ "-T" ]
   } else if (is_win && use_lld) {
     arflags = [ "/llvmlibthin" ]
@@ -2244,7 +2240,7 @@ config("afdo_optimize_size") {
 # between //base/allocator:tcmalloc and AFDO on GCC), so we provide a separate
 # config to allow AFDO to be disabled per-target.
 config("afdo") {
-  if (is_clang) {
+  if (is_clang && !is_openbsd) {
     cflags = []
     if (clang_emit_debug_info_for_profiling) {
       # Add the following flags to generate debug info for profiling.
@@ -2260,7 +2256,7 @@ config("afdo") {
       cflags += [ "-fprofile-sample-use=${rebased_clang_sample_profile}" ]
       inputs = [ _clang_sample_profile ]
     }
-  } else if (auto_profile_path != "" && is_a_target_toolchain) {
+  } else if (auto_profile_path != "" && is_a_target_toolchain && !is_openbsd) {
     cflags = [ "-fauto-profile=${auto_profile_path}" ]
     inputs = [ auto_profile_path ]
   }
@@ -2344,11 +2340,11 @@ config("symbols") {
     # flag, so we can use use -g1 for pnacl and nacl-clang compiles.
     # gcc nacl is is_nacl && !is_clang, pnacl and nacl-clang are && is_clang.
     if (!is_nacl || is_clang) {
-      cflags += [ "-g2" ]
+      cflags += [ "-g0" ]
     }
 
     # TODO(https://crbug.com/1050118): Investigate missing debug info on mac.
-    if (is_clang && !is_nacl && !use_xcode_clang && !is_apple && !use_qt) {
+    if (is_clang && !is_nacl && !use_xcode_clang && !is_apple && !is_openbsd) {
       cflags += [
         "-Xclang",
         "-debug-info-kind=constructor",
