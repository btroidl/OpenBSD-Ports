Index: src/3rdparty/chromium/content/app/content_main_runner_impl.cc
--- src/3rdparty/chromium/content/app/content_main_runner_impl.cc.orig
+++ src/3rdparty/chromium/content/app/content_main_runner_impl.cc
@@ -121,17 +121,17 @@
 #include "base/posix/global_descriptors.h"
 #include "content/public/common/content_descriptors.h"
 
-#if !defined(OS_MAC)
+#if !defined(OS_MAC) && !defined(OS_BSD)
 #include "content/public/common/zygote/zygote_fork_delegate_linux.h"
 #endif
-#if !defined(OS_MAC) && !defined(OS_ANDROID)
+#if !defined(OS_MAC) && !defined(OS_ANDROID) && !defined(OS_BSD)
 #include "content/zygote/zygote_main.h"
 #include "sandbox/linux/services/libc_interceptor.h"
 #endif
 
 #endif  // OS_POSIX || OS_FUCHSIA
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_BSD)
 #include "base/native_library.h"
 #include "base/rand_util.h"
 #include "content/public/common/zygote/sandbox_support_linux.h"
@@ -167,6 +167,13 @@
 
 #endif // BUILDFLAG(USE_ZYGOTE_HANDLE)
 
+#if defined(OS_BSD)
+#include "base/system/sys_info.h"
+#include "content/public/common/common_sandbox_support_linux.h"
+#include "content/public/common/sandbox_init.h"
+#include "sandbox/policy/linux/sandbox_linux.h"
+#endif
+
 #if defined(OS_ANDROID)
 #include "content/browser/android/browser_startup_controller.h"
 #include "content/common/android/cpu_affinity.h"
@@ -308,7 +315,7 @@ void InitializeZygoteSandboxForBrowserProcess(
 }
 #endif  // BUILDFLAG(USE_ZYGOTE_HANDLE)
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_BSD)
 
 #if BUILDFLAG(ENABLE_PLUGINS)
 // Loads the (native) libraries but does not initialize them (i.e., does not
@@ -347,11 +354,14 @@ void PreloadLibraryCdms() {
 }
 #endif  // BUILDFLAG(ENABLE_LIBRARY_CDMS)
 
-#if BUILDFLAG(USE_ZYGOTE_HANDLE)
+#if BUILDFLAG(USE_ZYGOTE_HANDLE) || defined(OS_BSD)
 void PreSandboxInit() {
+// arc4random
+#if !defined(OS_OPENBSD)
   // Pre-acquire resources needed by BoringSSL. See
   // https://boringssl.googlesource.com/boringssl/+/HEAD/SANDBOXING.md
   CRYPTO_pre_sandbox_init();
+#endif
 
 #if BUILDFLAG(ENABLE_PLUGINS)
   // Ensure access to the Pepper plugins before the sandbox is turned on.
@@ -361,8 +371,13 @@ void PreSandboxInit() {
   // Ensure access to the library CDMs before the sandbox is turned on.
   PreloadLibraryCdms();
 #endif
-#if BUILDFLAG(ENABLE_WEBRTC)
-  InitializeWebRtcModule();
+//#if BUILDFLAG(ENABLE_WEBRTC)
+//  InitializeWebRtcModule();
+//#endif
+
+#if defined(OS_BSD)
+  // "cache" the amount of physical memory before pledge(2)
+  base::SysInfo::AmountOfPhysicalMemoryMB();
 #endif
 
   // Set the android SkFontMgr for blink. We need to ensure this is done
@@ -464,7 +479,7 @@ int RunZygote(ContentMainDelegate* delegate) {
   delegate->ZygoteStarting(&zygote_fork_delegates);
   media::InitializeMediaLibrary();
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_BSD)
   PreSandboxInit();
 #endif
 
@@ -606,10 +621,10 @@ int ContentMainRunnerImpl::Initialize(const ContentMai
              kFieldTrialDescriptor + base::GlobalDescriptors::kBaseDescriptor);
 #endif  // !OS_ANDROID
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_CHROMEOS)
   g_fds->Set(kCrashDumpSignal,
              kCrashDumpSignal + base::GlobalDescriptors::kBaseDescriptor);
-#endif  // defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_OPENBSD)
+#endif  // defined(OS_LINUX) || defined(OS_CHROMEOS)
 
 #endif  // !OS_WIN
 
@@ -802,6 +817,16 @@ int ContentMainRunnerImpl::Initialize(const ContentMai
     }
 #endif
 
+#if defined(OS_OPENBSD)
+    if (process_type.empty()) {
+      sandbox::policy::SandboxLinux::Options sandbox_options;
+      sandbox::policy::SandboxLinux::GetInstance()->InitializeSandbox(
+          sandbox::policy::SandboxTypeFromCommandLine(
+              *base::CommandLine::ForCurrentProcess()),
+          sandbox::policy::SandboxLinux::PreSandboxHook(), sandbox_options);
+    }
+#endif
+
     delegate_->SandboxInitialized(process_type);
 
 #if BUILDFLAG(USE_ZYGOTE_HANDLE)
@@ -841,7 +866,7 @@ int ContentMainRunnerImpl::Run(bool start_service_mana
       delegate_->PostFieldTrialInitialization();
     }
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS)
+#if defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_BSD)
     // If dynamic Mojo Core is being used, ensure that it's loaded very early in
     // the child/zygote process, before any sandbox is initialized. The library
     // is not fully initialized with IPC support until a ChildProcess is later
@@ -864,6 +889,11 @@ int ContentMainRunnerImpl::Run(bool start_service_mana
 #endif
 
   RegisterMainThreadFactories();
+
+#if defined(OS_OPENBSD)
+  if (!process_type.empty())
+    PreSandboxInit();
+#endif
 
   if (process_type.empty())
     return RunServiceManager(main_params, start_service_manager_only);
