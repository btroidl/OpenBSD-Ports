Index: src/buildtools/config/linking.pri
--- src/buildtools/config/linking.pri.orig
+++ src/buildtools/config/linking.pri
@@ -1,6 +1,10 @@
 include($$QTWEBENGINE_OUT_ROOT/src/buildtools/qtbuildtools-config.pri)
 QT_FOR_CONFIG += buildtools-private
 
+# Do not pass --no-undefined to the linker because of environ(7) usage.
+openbsd: QMAKE_LFLAGS_NOUNDEF =
+
+
 linking_pri = $$OUT_PWD/$$getConfigDir()/$${TARGET}.pri
 
 !include($$linking_pri) {
@@ -10,10 +14,10 @@ linking_pri = $$OUT_PWD/$$getConfigDir()/$${TARGET}.pr
 # Do not precompile any headers. We are only interested in the linker step.
 PRECOMPILED_HEADER =
 
-isEmpty(NINJA_OBJECTS): error("Missing object files from linking pri.")
-isEmpty(NINJA_LFLAGS): error("Missing linker flags from linking pri")
-isEmpty(NINJA_ARCHIVES): error("Missing archive files from linking pri")
-isEmpty(NINJA_LIBS): error("Missing library files from linking pri")
+#isEmpty(NINJA_OBJECTS): error("Missing object files from linking pri.")
+#isEmpty(NINJA_LFLAGS): error("Missing linker flags from linking pri")
+#isEmpty(NINJA_ARCHIVES): error("Missing archive files from linking pri")
+#isEmpty(NINJA_LIBS): error("Missing library files from linking pri")
 NINJA_OBJECTS = $$eval($$list($$NINJA_OBJECTS))
 # Do manual response file linking for macOS and Linux
 
@@ -27,6 +31,8 @@ write_file($$RSP_ARCHIVE_FILE, RSP_A_CONTENT)
 if(macos|ios) {
     !static {
         QMAKE_LFLAGS += -Wl,-filelist,$$shell_quote($${RSP_OBJECT_FILE})
+        QMAKE_LFLAGS += -Wl,-z,nobtcfi
+        QMAKE_LFLAGS += -Wl,-z,wxneeded
         QMAKE_LFLAGS += @$${RSP_ARCHIVE_FILE}
     } else {
         OBJECTS += $$NINJA_OBJECTS
@@ -34,7 +40,7 @@ if(macos|ios) {
     }
 }
 
-linux {
+unix {
     !static {
         QMAKE_LFLAGS += @$${RSP_OBJECT_FILE}
         QMAKE_LFLAGS += -Wl,--start-group @$${RSP_ARCHIVE_FILE} -Wl,--end-group
@@ -60,7 +66,7 @@ LIBS_PRIVATE += $$NINJA_LIB_DIRS $$NINJA_LIBS
 
 unix:qtConfig(webengine-noexecstack): \
     QMAKE_LFLAGS += -Wl,-z,noexecstack
-linux {
+unix {
     # add chromium flags
     for(flag, NINJA_LFLAGS) {
         # filter out some flags
